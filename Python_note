1.运算符
  算数运算符：//（整除且只保留整数），**（幂运算）
  逻辑运算符：and,or,not(different from c++）

2.列表
  Def：一个有索引的序列，索引从0开始。
       一个有序的可重复元素序列。
       列表是可变的，列表中的元素可以重复，可以是不同的类型。

  创建方法: 1.alist = [1,2,3,4,5,6] #列表使用[]表示，每个元素之间用,隔开
            2.blist = list("hello world!") #列表也可以使用list()函数将其他可迭代的对象转换为列表，比如字符串

  访问元素: 1.索引：正向从0-len（alist）~1，反向从-len(alist)~-1(注意range(a,b)函数是从a~b-1)
            2.切片：list_name[start_index:end_index:step]（注意step缺省为1,start默认第一个元素，end默认最后一个)
                    同时需要注意，截取的部分索引范围为:start_index~end_index-1,即不包括end_index
              eg:print('获取所有索引为偶数的元素')
                 print('alist[::2]: ',alist[::2])

  运算符：+：拼接两个列表，eg：alist+blist
          *：列表*整数，将列表重复，eg：alist*3
          in：用于判断某元素是否在列表内，eg：3 in alist

  函数：len(alist),max(alist),min(alist) (函数参数为列表)
  方法：(有点类似c++结构体/类的内部函数调用)
        方法名	                        描述	                           返回值
        list.append(obj)	      在列表末尾添加新元素	                  无，原地操作
        list.count(obj)	        统计一个元素在列表中出现的次数	        返回该元素出现的次数
        list.extend(seq)	      将一个序列(eg.[11,12])中的所有元素添加到列表末尾	  无，原地操作
        list.index(obj)	        从列表中找出某个值第一个匹配项的索引位置	 返回索引
        list.insert(index, obj)	将元素插入列表中的指定位置	            无，原地操作
        list.pop([index=-1])	  移除列表中的一个元素（默认最后一个元素），并且返回该元素的值	 返回移除的元素值
        list.remove(obj)	      移除列表中某个值第一个匹配项	          无，原地操作
        list.reverse()	        逆向排列列表中的所有元素	              无，原地操作
        list.sort(key=None,reverse=False)	对列表内元素进行排序，默认为升序	    无，原地操作
        list.clear()	          清空列表	                            无，原地操作
        list.copy()	            复制列表	                            复制后的列表
        其中需要注意copy()，比如alist_copy=alist,其实是将alist的地址赋给alist_copy,对其中任一操作都相当于对两个操作，而使用alist_copy=alist.copy()才是真正新建了一个新的对象，两者相互独立

3.元组（感觉和列表基本一样，除了创建方式以及不可修改）
  Def：元组和列表很相似，但是元组创建后不可修改，若尝试修改内部元素则报错。
  创建方法：1.用()表示，eg：atuple = (1,2,3)
  访问方式：也是索引和切片，和列表一致
  运算符：和列表完全一致
  函数：和列表完全一致

4.集合
  Def：集合是无序的不重复的元素序列，支持交集、并集、差集等常见的集合操作。

  创建方法：集合的创建使用{}表示，并用,隔开，eg:aset = {1,2,3,4,5}。
            注意如果需要创建一个空集合需要使用set(),eg:aset = set()。 
            还可以用set()将其他序列转化为集合eg:alist = [1,1,1,1,2,2,2,2,3,3,3] aset = set(alist)
  
  常用方法：
          方法名称	                   描述	                          返回值
          add()	                  为集合添加元素	                 无返回值，原地操作
          clear()	                移除集合中的所有元素	             无返回值，原地操作
          copy()	                拷贝一个集合	                   返回拷贝后新创建的集合
          difference()	          返回多个集合的差集	               返回差集结果
          intersection()	        返回集合的交集	                 返回交集结果
          union()	                返回两个集合的并集                返回并集结果
          symmetric_difference()	返回两个集合中不重复的元素集合	   返回两个集合中不重复的元素集合
          isdisjoint()	          判断两个集合是否包含相同的元素	    bool,如果没有返回 True，否则返回 False
          issubset()	            判断指定集合是否为该方法参数集合的子集(eg.a.issubset(b),如果a是b的子集，则返回true)	bool,如果没有返回 True，否则返回 False
          issuperset()	          判断该方法的参数集合是否为指定集合的子集	bool,如果没有返回 True，否则返回 False
          update()	              合并两个集合，传入的参数必须是一个集合	无返回值，原地操作
          pop()	                  随机移除元素	                    返回被移除的元素
          remove()	              移除指定元素	                    无返回值，原地操作
          discard()	              删除集合中指定的元素	              无返回值，原地操作
  其中remove()：如果元素不存在，会抛出 KeyError;discard()：如果元素不存在，不会有任何错误，也不会改变集合。

5.字典
  Def：字典是一个无序的可以修改的序列，每一个元素都由一对key与value组成，key为对应value的索引。
       key不可重复，且需要是不可变对象（可hash，即可通过hash()计算相应哈希值），可以是数字，字符串，元组等，但不能是列表。value可以重复

  创建方法：可以用dict()（用来创建空字典）或者{key1:value1,key2:value2,...}来创建。还记得在集合中我们提过{}能用于创建空集合（？似乎是不能），是因为{}创建的是一个空字典
            eg.adict = {"list" : [1,2,3],'list2':[1,2,3],'interLM': 'LLM', 1:'summer camp',2:'internLM'}

  访问方式：eg.adict['list'] = [3](修改key为list的元素值，其中[3]表示创建字典)
               del adict['list2']（表示删除字典中的元素）

  常用方法：
      方法名	                              描述
      dict.clear()	                删除字典内所有元素
      dict.copy()	                  返回一个字典的浅复制
      dict.fromkeys()	              创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
      dict.get(key, default=None)	  返回指定键的值，如果键不在字典中返回 default 设置的默认值
      dict.items()	                返回字典内所有的key value对
      dict.keys()	                  返回所有的key
      dict.values()	                返回所有的values
      dict.update(dict2)	          把字典dict2的键/值对更新到dict里
      pop(key[,default])	          删除字典 key（键）所对应的值，返回被删除的值。
  其中fromkeys()用法举例：dict.fromkeys([1,2,3,4],0) ，则生成字典{1:0,2:0,3:,4:0}

6.字符串
  Def：本质上是一个不可变的元素可重复的有序序列

  创建方法：使用"或者'来创建,两者等价，但是"会高于'。此外，'''可以用来创建包含多行的字符串，
            eg.s = '''这是第一行
                        这是第二行
                        这是第三行'''。
            若字符串中有'',则可使用""创建

  访问方式：由于字符串本质是由字符组成的序列，所以除了不能修改，其索引和切片操作与列表一模一样。

  运算符：+:字符串连接
          *:重复输出字符串
          in：成员运算符 如果字符串中包含给定的字符返回 True
          not in：成员运算符如果字符串中不包含给定的字符返回 True	'M' not in a 输出结果 True
    (与列表基本一样)

  方法：
    方法名	功能描述
    capitalize()	将字符串的第一个字符转换为大写
    center(width, fillchar)	返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格
    count(str, beg= 0,end=len(string))	返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内str 出现的次数
    endswith(suffix, beg=0, end=len(string))	检查字符串是否以 suffix 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 suffix 结束，如果是，返回 True,否则返回 False。
    expandtabs(tabsize=8)	把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8
    find(str, beg=0, end=len(string))	检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1
    index(str, beg=0, end=len(string))	跟find()方法一样，只不过如果str不在字符串中会报一个异常
    isalnum()	如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False
    isalpha()	如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False
    isdigit()	如果字符串只包含数字则返回 True 否则返回 False..
    islower()	如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
    isnumeric()	如果字符串中只包含数字字符，则返回 True，否则返回 False
    isspace()	如果字符串中只包含空白，则返回 True，否则返回 False.
    istitle()	如果字符串是标题化的(见 title())则返回 True，否则返回 False
    isupper()	如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
    join(seq)	以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
    ljust(width[, fillchar])	返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。
    lower()	转换字符串中所有大写字符为小写
    lstrip()	截掉字符串左边的空格或指定字符
    maketrans()	创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
    max(str)	返回字符串 str 中最大的字母
    min(str)	返回字符串 str 中最小的字母
    replace(old, new [, max])	将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次
    rfind(str, beg=0,end=len(string))	类似于 find()函数，不过是从右边开始查找.
    rindex( str, beg=0, end=len(string))	类似于 index()，不过是从右边开始
    rjust(width,[, fillchar])	返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串
    rstrip()	删除字符串末尾的空格或指定字符。
    split(str="", num=string.count(str))	以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串
    splitlines([keepends])	按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。
    startswith(substr, beg=0,end=len(string))	检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。
    strip([chars])	在字符串上执行 lstrip()和 rstrip()
    swapcase()	将字符串中大写转换为小写，小写转换为大写
    title()	返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写
    translate(table, deletechars="")	根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中
    zfill (width)	返回长度为 width 的字符串，原字符串右对齐，前面填充0
    isdecimal()	检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false
